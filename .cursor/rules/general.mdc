---
description: 
globs: 
alwaysApply: true
---
### ğŸ”„ Projektkenntnis und -kontext
- **Lesen Sie zu Beginn eines neuen GesprÃ¤chs immer `plan.md`**, um die Architektur, die Ziele, den Stil und die BeschrÃ¤nkungen des Projekts zu verstehen.
- **PrÃ¼fen Sie `tasks.md`**, bevor Sie eine neue Aufgabe beginnen. Wenn die Aufgabe nicht aufgefÃ¼hrt ist, fÃ¼gen Sie sie mit einer kurzen Beschreibung und dem heutigen Datum hinzu.
- **Verwenden Sie konsistente Benennungskonventionen, Dateistrukturen und Architekturmuster**, wie in `plan.md` beschrieben.
- werden Entscheidungen getroffen mÃ¼ssen diese in `plan.md` oder `tasks.md` festgehalten werden damit der Code immer zu unserem Plan passt

### ğŸ§± Code-Struktur & ModularitÃ¤t
- **Erstelle niemals eine Datei, die lÃ¤nger als 500 Zeilen Code ist.** Wenn sich eine Datei dieser Grenze nÃ¤hert, refaktorisiere sie, indem du sie in Module oder Hilfsdateien aufteilst.
- **Organisieren Sie den Code in klar getrennte Module**, gruppiert nach Funktion oder Verantwortung.
- **Verwenden Sie klare, konsistente Importe** (bevorzugen Sie relative Importe innerhalb von Paketen).

### âœ… Aufgabenerledigung
- **Markieren Sie abgeschlossene Aufgaben in `tasks.md`** sofort nach ihrer Erledigung.
- FÃ¼gen Sie neue Unteraufgaben oder TODOs, die wÃ¤hrend der Entwicklung entdeckt wurden, in `tasks.md` unter einem Abschnitt "Discovered During Work" dem aktuellen Feature hinzu.

### Auskommentieren von Code

Lieber Code lÃ¶schen als auskommentieren, das ist nur zu testzwecken erlaubt

